initSidebarItems({"constant":[["CURSOR_MARKER",""],["ESCAPED_CURSOR_MARKER",""]],"enum":[["RangeOrOffset",""]],"fn":[["__diff",""],["add_cursor","Inserts `$0` marker into the `text` at `offset`."],["bench","Utility for writing benchmark tests."],["extract_annotations","Extracts `//^ some text` annotations"],["extract_offset","Infallible version of `try_extract_offset()`."],["extract_range","Infallible version of `try_extract_range()`."],["extract_range_or_offset","Extracts `TextRange` or `TextSize` depending on the amount of `$0` markers found in `text`."],["extract_tags","Extracts ranges, marked with `<tag> </tag>` pairs from the `text`"],["find_mismatch","Compares JSON object for approximate equality. You can use `[..]` wildcard in strings (useful for OS dependent things such as paths). You can use a `\"{...}\"` string literal as a wildcard for arbitrary nested JSON. Arrays are sorted before comparison."],["format_diff",""],["lines_match","Compare a line with an expected pattern."],["project_dir","Returns the path to the root directory of `rust-analyzer` project."],["skip_slow_tests","Returns `false` if slow tests should not run, otherwise returns `true` and also creates a file at `./target/.slow_tests_cookie` which serves as a flag that slow tests did run."]],"macro":[["_check",""],["_hit",""],["assert_eq_text","Asserts that two strings are equal, otherwise displays a rich diff between them."]],"mod":[["bench_fixture","Generates large snippets of Rust code for usage in the benchmarks."],["mark","This module implements manually tracked test coverage, which is useful for quickly finding a test responsible for testing a particular bit of code."]],"struct":[["Fixture",""]],"type":[["FxHashMap","Type alias for a hashmap using the `fx` hash algorithm."]]});